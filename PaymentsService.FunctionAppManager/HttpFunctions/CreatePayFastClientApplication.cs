using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Firepuma.PaymentsService.Abstractions.DTOs.Requests;
using Firepuma.PaymentsService.Abstractions.Infrastructure.Queues;
using Firepuma.PaymentsService.Abstractions.Infrastructure.Validation;
using Firepuma.PaymentsService.FunctionAppManager.Commands;
using Firepuma.PaymentsService.FunctionAppManager.Infrastructure.Helpers;
using Firepuma.PaymentsService.Implementations.Config;
using Firepuma.PaymentsService.Implementations.Factories;
using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.Cosmos.Table;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

// ReSharper disable RedundantNameQualifier

namespace Firepuma.PaymentsService.FunctionAppManager.HttpFunctions;

public class CreatePayFastClientApplication
{
    private readonly IMediator _mediator;

    public CreatePayFastClientApplication(
        IMediator mediator)
    {
        _mediator = mediator;
    }

    [FunctionName("CreatePayFastClientApplication")]
    public async Task<IActionResult> RunAsync(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = "CreatePayFastClientApplication/{applicationId}")]
        HttpRequest req,
        ILogger log,
        [Table("PaymentsConfigPerApplication")] CloudTable clientAppConfigTable,
        string applicationId,
        CancellationToken cancellationToken)
    {
        log.LogInformation("C# HTTP trigger function processed a request");

        var serviceBusConnectionString = EnvironmentVariableHelpers.GetRequiredEnvironmentVariable("ServiceBusConnectionString");

        var requestBody = await new StreamReader(req.Body).ReadToEndAsync();
        var requestDTO = JsonConvert.DeserializeObject<CreatePayFastClientApplicationRequest>(requestBody);

        if (requestDTO == null)
        {
            return HttpResponseFactory.CreateBadRequestResponse("Request body is required but empty");
        }

        if (!ValidationHelpers.ValidateDataAnnotations(requestDTO, out var validationResultsForRequest))
        {
            return HttpResponseFactory.CreateBadRequestResponse(new[] { "Request body is invalid" }.Concat(validationResultsForRequest.Select(s => s.ErrorMessage)).ToArray());
        }

        var queueName = QueueNameFormatter.GetPaymentUpdatedQueueName(applicationId);

        var functionHostKeyName = $"client-app-autogenerated-{applicationId}";

        var applicationSecret = ClientAppConfig.GenerateRandomSecret();
        var newClientAppConfig = new ClientAppConfig(
            "PayFast",
            applicationId,
            applicationSecret,
            requestDTO.IsSandbox,
            requestDTO.MerchantId,
            requestDTO.MerchantKey,
            requestDTO.PassPhrase);

        var commands = new IBaseRequest[]
        {
            new CreateQueue.Command(serviceBusConnectionString, queueName),
            new CreateFunctionHostSecretKey.Command(functionHostKeyName),
            new AddClientAppTableRecord.Command(clientAppConfigTable, newClientAppConfig),
        };

        var responseObjects = new List<KeyValuePair<string, object>>();
        var logsForResponse = new List<string>();
        foreach (var command in commands)
        {
            var commandName = command.GetType().GetShortTypeName();

            var stopwatch = Stopwatch.StartNew();

            var response = await _mediator.Send(command, cancellationToken);
            responseObjects.Add(new KeyValuePair<string, object>($"{commandName} command", response));

            var durationInSeconds = stopwatch.Elapsed.TotalSeconds.ToString("F");
            logsForResponse.Add($"Command {commandName} duration {durationInSeconds}s");
        }

        responseObjects.Add(new KeyValuePair<string, object>("logs", logsForResponse));

        return new OkObjectResult(new Dictionary<string, object> { { "results", responseObjects } });
    }
}